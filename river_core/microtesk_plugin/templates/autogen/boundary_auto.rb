#
# ISP RAS (http://www.ispras.ru)
#
# This ruby template was automatically generated by the MicroTESK tool
# Generation started: Fri Dec 27 11:59:27 MSK 2019
#

require_relative '../riscv_base'

class BoundaryGenTemplate < RiscVBaseTemplate
  def pre
    super
    data {
      label :data
      word rand(1, 9), rand(1, 9), rand(1, 9), rand(1, 9)
      label :end_data
      space 1
    }
  end
  
  def run
    set_default_allocator FREE
    
    # Only arithmetic operations
    
    sequence {
      fadd_s f(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fsub_s f(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fmul_s f(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fdiv_s f(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fmin_s f(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fmax_s f(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fsgnj_s f(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fsgnjn_s f(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fsgnjx_s f(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fcvt_w_s x(_), f(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      fcvt_wu_s x(_), f(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      feq_s x(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      flt_s x(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fle_s x(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fadd_d f(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fsub_d f(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fmul_d f(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fdiv_d f(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fmin_d f(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fmax_d f(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fsgnj_d f(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fsgnjn_d f(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fsgnjx_d f(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fcvt_w_d x(_), f(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      fcvt_wu_d x(_), f(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      feq_d x(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      flt_d x(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      fle_d x(_), f(_), f(_) do testdata('boundary') end      
    }.run
    
    sequence {
      addiw x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      slliw x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      srliw x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      sraiw x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      addw x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      subw x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      sllw x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      srlw x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      sraw x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      addi x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      slti x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      sltiu x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      xori x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      ori x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      andi x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      slli x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      srli x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      srai x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      sll x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      srl x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      sra x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      add x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      sub x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      slt x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      sltu x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      AND x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      OR x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      xor x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    #sequence {
    #  vadd vr(_), vr(_), vr(_) do testdata('boundary') end      
    #}.run
    #
    #sequence {
    #  vsub vr(_), vr(_), vr(_) do testdata('boundary') end      
    #}.run
    #
    #sequence {
    #  vmul vr(_), vr(_), vr(_) do testdata('boundary') end      
    #}.run
    #
    #sequence {
    #  vmulh vr(_), vr(_), vr(_) do testdata('boundary') end      
    #}.run
    #
    #sequence {
    #  vdiv vr(_), vr(_), vr(_) do testdata('boundary') end      
    #}.run
    
    sequence {
      fcvt_l_d x(_), f(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      fcvt_lu_d x(_), f(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      fcvt_l_s x(_), f(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      fcvt_lu_s x(_), f(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      mulw x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      divw x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      divuw x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      remw x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      remuw x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      mul x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      mulh x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      mulhu x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      mulhsu x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      div x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      divu x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      rem x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      remu x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    #sequence {
    #  csrrw x(_), ustatus(), x(_) do testdata('boundary') end      
    #}.run
    #
    #sequence {
    #  csrrs x(_), ustatus(), x(_) do testdata('boundary') end      
    #}.run
    #
    #sequence {
    #  csrrc x(_), ustatus(), x(_) do testdata('boundary') end      
    #}.run
    #
    #sequence {
    #  csrrwi x(_), ustatus(), _ do testdata('boundary') end      
    #}.run
    #
    #sequence {
    #  csrrsi x(_), ustatus(), _ do testdata('boundary') end      
    #}.run
    #
    #sequence {
    #  csrrci x(_), ustatus(), _ do testdata('boundary') end      
    #}.run
  end
end
