#
# ISP RAS (http://www.ispras.ru)
#
# This ruby template was automatically generated by the MicroTESK tool
# Generation started: Fri Dec 27 11:59:27 MSK 2019
#

require_relative '../riscv_base'

class GroupGenTemplate < RiscVBaseTemplate

  def pre_rvtest
    RVTEST_RV64MF()
    RVTEST_CODE_BEGIN()
  end

  def pre
    super
    data {
      text '.align 8'
      label :data
      word rand(1, 9), rand(1, 9), rand(1, 9), rand(1, 9)
      label :end_data
      space 1
    }
  end
  
  def run
    set_default_allocator FREE
    
    #  BRANCH_OPERATIONS
    sequence {
      
      blez x(_), :blez_label
      nop
      label :blez_label
      nop
      
      beqz x(_), :beqz_label
      nop
      label :beqz_label
      nop
      
      bltz x(_), :bltz_label
      nop
      label :bltz_label
      nop
      
      bgtz x(_), :bgtz_label
      nop
      label :bgtz_label
      nop
      
      bltu x(_), x(_), :bltu_label
      nop
      label :bltu_label
      nop
      
      bne x(_), x(_), :bne_label
      nop
      label :bne_label
      nop
      
      bgeu x(_), x(_), :bgeu_label
      nop
      label :bgeu_label
      nop
      
      beq x(_), x(_), :beq_label
      nop
      label :beq_label
      nop
      
      j :j_label
      nop
      label :j_label
      nop
      
      jal x(_), :jal_label
      nop
      label :jal_label
      nop
      
      blt x(_), x(_), :blt_label
      nop
      label :blt_label
      nop
      
      bge x(_), x(_), :bge_label
      nop
      label :bge_label
      nop
      
      la x(3), :jr_label
      jr x(3)
      nop
      label :jr_label
      nop
      
      bnez x(_), :bnez_label
      nop
      label :bnez_label
      nop
      
      bgez x(_), :bgez_label
      nop
      label :bgez_label
      nop
    }.run 10
    
    block(:combinator => 'product', :compositor => 'random') {
      #  STORE_OPERATIONS
      iterate {
        
        sequence {
          la x(5), :data
          amomax_w x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amoand_w x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amominu_d x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amomaxu_w x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amomin_d x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amoor_w x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          fsw f(5), x(5), :data
        }
        
        sequence {
          la x(5), :data
          sc_d x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          sd x(5), x(5), :data
        }
        
        sequence {
          la x(5), :data
          amomaxu_d x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          fsd f(5), x(5), :data
        }
        
        sequence {
          la x(5), :data
          sc_w x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amoswap_w x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amoadd_d x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amoand_d x(_), x(5), x(5)
        }
        
        #sequence {
        #  la x(5), :data
        #  vsw vr(5), x(5)
        #}
        
        sequence {
          la x(5), :data
          amomax_d x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amominu_w x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          sh x(5), x(5), :data
        }
        
        sequence {
          la x(5), :data
          amoor_d x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amomin_w x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amoadd_w x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amoxor_d x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amoxor_w x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          sw x(5), x(5), :data
        }
        
        sequence {
          la x(5), :data
          sb x(5), x(5), :data
        }
        
        sequence {
          la x(5), :data
          amoswap_d x(_), x(5), x(5)
        }
      }
      #  LOAD_OPERATIONS
      iterate {
        
        sequence {
          la x(5), :data
          amomax_w x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amoand_w x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amominu_d x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amomaxu_w x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amomin_d x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amoor_w x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          fsw f(5), x(5), :data
        }
        
        sequence {
          la x(5), :data
          ld x(_), x(5), :data
        }
        
        sequence {
          la x(5), :data
          sc_d x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          sd x(5), x(5), :data
        }
        
        sequence {
          la x(5), :data
          amomaxu_d x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          fsd f(5), x(5), :data
        }
        
        sequence {
          la x(5), :data
          sc_w x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amoswap_w x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          flw f(_), x(5), :data
        }
        
        sequence {
          la x(5), :data
          amoadd_d x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amoand_d x(_), x(5), x(5)
        }
        
        #sequence {
        #  la x(5), :data
        #  vsw vr(5), x(5)
        #}
        
        sequence {
          la x(5), :data
          lr_d x(_), x(5)
        }
        
        sequence {
          la x(5), :data
          amomax_d x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amominu_w x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          lwu x(_), x(5), :data
        }
        
        sequence {
          la x(5), :data
          lw x(_), x(5), :data
        }
        
        sequence {
          la x(5), :data
          sh x(5), x(5), :data
        }
        
        sequence {
          la x(5), :data
          lhu x(_), x(5), :data
        }
        
        sequence {
          la x(5), :data
          lr_w x(_), x(5)
        }
        
        sequence {
          la x(5), :data
          lh x(_), x(5), :data
        }
        
        sequence {
          la x(5), :data
          lb x(_), x(5), :data
        }
        
        sequence {
          la x(5), :data
          amoor_d x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amomin_w x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amoadd_w x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amoxor_d x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          amoxor_w x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          fld f(_), x(5), :data
        }
        
        sequence {
          la x(5), :data
          sw x(5), x(5), :data
        }
        
        sequence {
          la x(5), :data
          sb x(5), x(5), :data
        }
        
        #sequence {
        #  la x(5), :data
        #  vlw vr(_), x(5)
        #}
        
        sequence {
          la x(5), :data
          amoswap_d x(_), x(5), x(5)
        }
        
        sequence {
          la x(5), :data
          lbu x(_), x(5), :data
        }
      }
      #  ARITHMETIC_OPERATIONS
      iterate {
        
        #vmul vr(_), vr(_), vr(_)
        
        fsgnjn_s f(_), f(_), f(_)
        
        fcvt_wu_d x(_), f(_), _
        
        fmul_s f(_), f(_), f(_)
        
        mulw x(_), x(_), x(_)
        
        sub x(_), x(_), x(_)
        
        fmax_d f(_), f(_), f(_)
        
        #vadd vr(_), vr(_), vr(_)
        
        fdiv_d f(_), f(_), f(_)
        
        sraiw x(_), x(_), _
        
        #csrrwi x(_), ustatus(), _
        
        #vdiv vr(_), vr(_), vr(_)
        
        divw x(_), x(_), x(_)
        
        fadd_d f(_), f(_), f(_)
        
        srlw x(_), x(_), x(_)
        
        sltiu x(_), x(_), _
        
        fcvt_lu_s x(_), f(_), _
        
        fcvt_wu_s x(_), f(_), _
        
        fmin_d f(_), f(_), f(_)
        
        OR x(_), x(_), x(_)
        
        fcvt_l_s x(_), f(_), _
        
        #csrrsi x(_), ustatus(), _
        
        fmul_d f(_), f(_), f(_)
        
        rem x(_), x(_), x(_)
        
        addiw x(_), x(_), _
        
        AND x(_), x(_), x(_)
        
        srli x(_), x(_), _
        
        divu x(_), x(_), x(_)
        
        slti x(_), x(_), _
        
        add x(_), x(_), x(_)
        
        sra x(_), x(_), x(_)
        
        fsgnj_d f(_), f(_), f(_)
        
        sll x(_), x(_), x(_)
        
        fcvt_w_s x(_), f(_), _
        
        divuw x(_), x(_), x(_)
        
        #csrrw x(_), ustatus(), x(_)
        
        flt_s x(_), f(_), f(_)
        
        mulhu x(_), x(_), x(_)
        
        fsgnjx_d f(_), f(_), f(_)
        
        subw x(_), x(_), x(_)
        
        fmin_s f(_), f(_), f(_)
        
        fsub_d f(_), f(_), f(_)
        
        sraw x(_), x(_), x(_)
        
        addi x(_), x(_), _
        
        andi x(_), x(_), _
        
        fsgnjx_s f(_), f(_), f(_)
        
        xor x(_), x(_), x(_)
        
        remu x(_), x(_), x(_)
        
        fcvt_w_d x(_), f(_), _
        
        addw x(_), x(_), x(_)
        
        #csrrs x(_), ustatus(), x(_)
        
        fadd_s f(_), f(_), f(_)
        
        feq_d x(_), f(_), f(_)
        
        #csrrci x(_), ustatus(), _
        
        srl x(_), x(_), x(_)
        
        fle_s x(_), f(_), f(_)
        
        fcvt_lu_d x(_), f(_), _
        
        fle_d x(_), f(_), f(_)
        
        xori x(_), x(_), _
        
        srliw x(_), x(_), _
        
        ori x(_), x(_), _
        
        div x(_), x(_), x(_)
        
        #vsub vr(_), vr(_), vr(_)
        
        fsgnj_s f(_), f(_), f(_)
        
        srai x(_), x(_), _
        
        slt x(_), x(_), x(_)
        
        fmax_s f(_), f(_), f(_)
        
        mulhsu x(_), x(_), x(_)
        
        fdiv_s f(_), f(_), f(_)
        
        slli x(_), x(_), _
        
        flt_d x(_), f(_), f(_)
        
        mul x(_), x(_), x(_)
        
        remuw x(_), x(_), x(_)
        
        feq_s x(_), f(_), f(_)
        
        #vmulh vr(_), vr(_), vr(_)
        
        #csrrc x(_), ustatus(), x(_)
        
        remw x(_), x(_), x(_)
        
        mulh x(_), x(_), x(_)
        
        fsub_s f(_), f(_), f(_)
        
        slliw x(_), x(_), _
        
        sltu x(_), x(_), x(_)
        
        fsgnjn_d f(_), f(_), f(_)
        
        sllw x(_), x(_), x(_)
        
        fcvt_l_d x(_), f(_), _
      }
    }.run 10
  end
end
