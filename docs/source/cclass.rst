C-Class DUT
============

`C-Class Core Generator <https://c-class.readthedocs.io/en/latest/>`_ plugin is a core generator developed by IIT Madras.

Pre-requisites
--------------

You will need to install the following before using this plugin:

- The riscv-gnu-toolchain for compiling the tests
- The elf2hex utility required for converting the elf's to hex files for simulation.
- The open-source bluespec compiler
- Verilator needs to exist on your $path


Setting up the DUT
------------------

To setup C-Class as a DUT model for RiVer Core you will need to generate the verilog for your 
choice of configuration and provide the paths to the verilog to the plugin. 

To generate verilog of the default C-Class configuration:

.. code-block:: console

   $ cd ~/myquickstart
   $ git clone https://gitlab.com/incoresemi/core-generators/c-class.git
   $ cd c-class
   $ pip install -r requirements.txt
   $ python -m configure.main
   $ make -j<jobs> generate_verilog

The C-Class test-soc expects all tests to be loaded at address ``0x80000000``. The tests are loaded
using the regular "readmemh" command in verilog. Thus each test is converted to hex files using the
elf2hex command that comes with `spike <https://github.com/riscv/riscv-isa-sim>`_.

C-Class test-soc used for simulation also requires a simple boot-code. This is checked in to the
``boot`` directory inside the plugin. Currently this boot-code includes a basic dts file and
indirection to address ``0x80000000`` at the beginning itself. The Makefile in the ``boot`` directory
is used to create the required boot hex files.

Plugin Flow
-----------

There are multiple plugin variants available. Based on the simulator of choice, each plugin will
first compile the verilog and generate an executable. The compilation can account for the fact of
whether coverage is enabled or not. This is done as part of the `init` stage. The `init` stage will
also build all the collateral like boot.hex files that will be required for simulation.

The `build` stage will parse through the test-list provided and create a makefile. For each test a
target in the makefile is created. The the targets are defined such that they can all be run in
parallel with as many jobs as possible. This makefile will be written to the directory pointed by
the ``workdir`` variable of the main ``config.ini`` file.

The `run` stage simply passes on the make file command to the pytest environment for parallel
execution and report generation.

For each test RiVer Core expects the generation of a ``dut.dump`` which is the execution log of that
test to be present in the working-dir of that test as specified in the test-list. If coverage is
enabled then each test run will also generate the coverage database which can be merged/ranked
together. The dump format matches the dump created by spike using the ``--log-commits`` option.

The `post_run` stage is used to clean up unwanted artifacts and files generated by each test. The
following set of files are no longer preserved if tests pass on the DUT. They are preserved only
when a test-fails for debugging purposes. This feature is enabled only when ``space_saver`` flag in
the main ``config.ini`` is set to ``True``.

- app_log
- code.mem
- dut.disass
- dut.dump
- signature

Plugin Variants
---------------

The following variants of the c-class core are available. They each differ in based on the
simulator of choice

C-Class_Verilator
******************

For this plugin ensure you have installed verilator and it is available in your path.

To use this plugin, set the ``target`` in the main ``config.ini`` to `cclass_verilator`.

Instance in ``config.ini``
--------------------------

For any of the above variants, only the ``target`` setting needs to change in the following sample
instance code. The ``src_dir`` should contain all paths which will contain the necessary verilog
files for compiling the core (in a comma separated fashion). The ``src_dir`` should typically
include the following:

- the build/hw/verilog directory of the c-class core
- the common_log directory of the bsvwrappers repository
- the Verilog directory of the bluespec compiler installation.

.. code-block:: ini

  target = cclass_verilator
  path_to_target = ~/river_core_plugins/dut_plugins
  
  [cclass_verilator]
  jobs = 8
  # src dir: Verilog Dir, BSC Path, Wrapper path
  src_dir = /scratch/git-repo/shaktiproject/cores/c-class/build/hw/verilog/,/software/open-bsc/lib/Verilog,/scratch/git-repo/shaktiproject/cores/c-class/common_verilog/
  # Top Module for simulation 
  top_module = mkTbSoc

